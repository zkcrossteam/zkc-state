// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: kvpair.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KVPair_GetRoot_FullMethodName        = "/kvpair.KVPair/GetRoot"
	KVPair_SetRoot_FullMethodName        = "/kvpair.KVPair/SetRoot"
	KVPair_GetLeaf_FullMethodName        = "/kvpair.KVPair/GetLeaf"
	KVPair_SetLeaf_FullMethodName        = "/kvpair.KVPair/SetLeaf"
	KVPair_GetNonLeaf_FullMethodName     = "/kvpair.KVPair/GetNonLeaf"
	KVPair_SetNonLeaf_FullMethodName     = "/kvpair.KVPair/SetNonLeaf"
	KVPair_PoseidonHash_FullMethodName   = "/kvpair.KVPair/PoseidonHash"
	KVPair_DataHashRecord_FullMethodName = "/kvpair.KVPair/DataHashRecord"
)

// KVPairClient is the client API for KVPair service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVPairClient interface {
	GetRoot(ctx context.Context, in *GetRootRequest, opts ...grpc.CallOption) (*GetRootResponse, error)
	SetRoot(ctx context.Context, in *SetRootRequest, opts ...grpc.CallOption) (*SetRootResponse, error)
	GetLeaf(ctx context.Context, in *GetLeafRequest, opts ...grpc.CallOption) (*GetLeafResponse, error)
	SetLeaf(ctx context.Context, in *SetLeafRequest, opts ...grpc.CallOption) (*SetLeafResponse, error)
	GetNonLeaf(ctx context.Context, in *GetNonLeafRequest, opts ...grpc.CallOption) (*GetNonLeafResponse, error)
	SetNonLeaf(ctx context.Context, in *SetNonLeafRequest, opts ...grpc.CallOption) (*SetNonLeafResponse, error)
	PoseidonHash(ctx context.Context, in *PoseidonHashRequest, opts ...grpc.CallOption) (*PoseidonHashResponse, error)
	DataHashRecord(ctx context.Context, in *DataHashRecordRequest, opts ...grpc.CallOption) (*DataHashRecordResponse, error)
}

type kVPairClient struct {
	cc grpc.ClientConnInterface
}

func NewKVPairClient(cc grpc.ClientConnInterface) KVPairClient {
	return &kVPairClient{cc}
}

func (c *kVPairClient) GetRoot(ctx context.Context, in *GetRootRequest, opts ...grpc.CallOption) (*GetRootResponse, error) {
	out := new(GetRootResponse)
	err := c.cc.Invoke(ctx, KVPair_GetRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVPairClient) SetRoot(ctx context.Context, in *SetRootRequest, opts ...grpc.CallOption) (*SetRootResponse, error) {
	out := new(SetRootResponse)
	err := c.cc.Invoke(ctx, KVPair_SetRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVPairClient) GetLeaf(ctx context.Context, in *GetLeafRequest, opts ...grpc.CallOption) (*GetLeafResponse, error) {
	out := new(GetLeafResponse)
	err := c.cc.Invoke(ctx, KVPair_GetLeaf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVPairClient) SetLeaf(ctx context.Context, in *SetLeafRequest, opts ...grpc.CallOption) (*SetLeafResponse, error) {
	out := new(SetLeafResponse)
	err := c.cc.Invoke(ctx, KVPair_SetLeaf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVPairClient) GetNonLeaf(ctx context.Context, in *GetNonLeafRequest, opts ...grpc.CallOption) (*GetNonLeafResponse, error) {
	out := new(GetNonLeafResponse)
	err := c.cc.Invoke(ctx, KVPair_GetNonLeaf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVPairClient) SetNonLeaf(ctx context.Context, in *SetNonLeafRequest, opts ...grpc.CallOption) (*SetNonLeafResponse, error) {
	out := new(SetNonLeafResponse)
	err := c.cc.Invoke(ctx, KVPair_SetNonLeaf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVPairClient) PoseidonHash(ctx context.Context, in *PoseidonHashRequest, opts ...grpc.CallOption) (*PoseidonHashResponse, error) {
	out := new(PoseidonHashResponse)
	err := c.cc.Invoke(ctx, KVPair_PoseidonHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVPairClient) DataHashRecord(ctx context.Context, in *DataHashRecordRequest, opts ...grpc.CallOption) (*DataHashRecordResponse, error) {
	out := new(DataHashRecordResponse)
	err := c.cc.Invoke(ctx, KVPair_DataHashRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVPairServer is the server API for KVPair service.
// All implementations must embed UnimplementedKVPairServer
// for forward compatibility
type KVPairServer interface {
	GetRoot(context.Context, *GetRootRequest) (*GetRootResponse, error)
	SetRoot(context.Context, *SetRootRequest) (*SetRootResponse, error)
	GetLeaf(context.Context, *GetLeafRequest) (*GetLeafResponse, error)
	SetLeaf(context.Context, *SetLeafRequest) (*SetLeafResponse, error)
	GetNonLeaf(context.Context, *GetNonLeafRequest) (*GetNonLeafResponse, error)
	SetNonLeaf(context.Context, *SetNonLeafRequest) (*SetNonLeafResponse, error)
	PoseidonHash(context.Context, *PoseidonHashRequest) (*PoseidonHashResponse, error)
	DataHashRecord(context.Context, *DataHashRecordRequest) (*DataHashRecordResponse, error)
	mustEmbedUnimplementedKVPairServer()
}

// UnimplementedKVPairServer must be embedded to have forward compatible implementations.
type UnimplementedKVPairServer struct {
}

func (UnimplementedKVPairServer) GetRoot(context.Context, *GetRootRequest) (*GetRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoot not implemented")
}
func (UnimplementedKVPairServer) SetRoot(context.Context, *SetRootRequest) (*SetRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoot not implemented")
}
func (UnimplementedKVPairServer) GetLeaf(context.Context, *GetLeafRequest) (*GetLeafResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaf not implemented")
}
func (UnimplementedKVPairServer) SetLeaf(context.Context, *SetLeafRequest) (*SetLeafResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLeaf not implemented")
}
func (UnimplementedKVPairServer) GetNonLeaf(context.Context, *GetNonLeafRequest) (*GetNonLeafResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonLeaf not implemented")
}
func (UnimplementedKVPairServer) SetNonLeaf(context.Context, *SetNonLeafRequest) (*SetNonLeafResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNonLeaf not implemented")
}
func (UnimplementedKVPairServer) PoseidonHash(context.Context, *PoseidonHashRequest) (*PoseidonHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoseidonHash not implemented")
}
func (UnimplementedKVPairServer) DataHashRecord(context.Context, *DataHashRecordRequest) (*DataHashRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataHashRecord not implemented")
}
func (UnimplementedKVPairServer) mustEmbedUnimplementedKVPairServer() {}

// UnsafeKVPairServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVPairServer will
// result in compilation errors.
type UnsafeKVPairServer interface {
	mustEmbedUnimplementedKVPairServer()
}

func RegisterKVPairServer(s grpc.ServiceRegistrar, srv KVPairServer) {
	s.RegisterService(&KVPair_ServiceDesc, srv)
}

func _KVPair_GetRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVPairServer).GetRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVPair_GetRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVPairServer).GetRoot(ctx, req.(*GetRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVPair_SetRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVPairServer).SetRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVPair_SetRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVPairServer).SetRoot(ctx, req.(*SetRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVPair_GetLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVPairServer).GetLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVPair_GetLeaf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVPairServer).GetLeaf(ctx, req.(*GetLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVPair_SetLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVPairServer).SetLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVPair_SetLeaf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVPairServer).SetLeaf(ctx, req.(*SetLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVPair_GetNonLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNonLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVPairServer).GetNonLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVPair_GetNonLeaf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVPairServer).GetNonLeaf(ctx, req.(*GetNonLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVPair_SetNonLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNonLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVPairServer).SetNonLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVPair_SetNonLeaf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVPairServer).SetNonLeaf(ctx, req.(*SetNonLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVPair_PoseidonHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoseidonHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVPairServer).PoseidonHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVPair_PoseidonHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVPairServer).PoseidonHash(ctx, req.(*PoseidonHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVPair_DataHashRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataHashRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVPairServer).DataHashRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVPair_DataHashRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVPairServer).DataHashRecord(ctx, req.(*DataHashRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KVPair_ServiceDesc is the grpc.ServiceDesc for KVPair service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVPair_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kvpair.KVPair",
	HandlerType: (*KVPairServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoot",
			Handler:    _KVPair_GetRoot_Handler,
		},
		{
			MethodName: "SetRoot",
			Handler:    _KVPair_SetRoot_Handler,
		},
		{
			MethodName: "GetLeaf",
			Handler:    _KVPair_GetLeaf_Handler,
		},
		{
			MethodName: "SetLeaf",
			Handler:    _KVPair_SetLeaf_Handler,
		},
		{
			MethodName: "GetNonLeaf",
			Handler:    _KVPair_GetNonLeaf_Handler,
		},
		{
			MethodName: "SetNonLeaf",
			Handler:    _KVPair_SetNonLeaf_Handler,
		},
		{
			MethodName: "PoseidonHash",
			Handler:    _KVPair_PoseidonHash_Handler,
		},
		{
			MethodName: "DataHashRecord",
			Handler:    _KVPair_DataHashRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvpair.proto",
}
