syntax = "proto3";

import "google/api/annotations.proto";

package kvpair;

message NodeChildren {
  bytes left_child_hash = 5;
  bytes right_child_hash = 6;
}

enum NodeType {
  NodeUnspecified = 0;
  NodeLeaf = 1;
  NodeNonLeaf = 2;
  NodeInvalid = 3;
}

message Node {
  uint64 index = 1;
  bytes hash = 2;
  NodeType node_type = 3;
  oneof node_data {
    bytes data = 4;
    NodeChildren children = 5;
  }
}

enum ProofType {
  ProofUnspecified = 0; // Default enum value, equivalent to ProofEmpty
  ProofEmpty = 1;       // No proof
  ProofV0 = 2;
}

// A proof to validate whether some key value pair exists in the KVStore.
message Proof {
  ProofType proof_type = 1;
  bytes proof = 2;
}

message GetRootRequest { optional bytes contract_id = 1; }

message GetRootResponse { bytes root = 1; }

message SetRootRequest {
  optional bytes contract_id = 1;
  bytes hash = 2;
}

message SetRootResponse { bytes root = 1; }

message GetLeafRequest {
  optional bytes contract_id = 1;
  uint64 index = 2;
  optional bytes hash = 3;
  ProofType proof_type = 4;
}

message GetLeafResponse {
  Node node = 1;
  optional Proof proof = 2;
}

message GetNonLeafRequest {
  optional bytes contract_id = 1;
  uint64 index = 2;
  bytes hash = 3;
}

message GetNonLeafResponse { Node node = 1; }

message SetLeafRequest {
  optional bytes contract_id = 1;
  uint64 index = 2;
  optional bytes hash = 3;
  optional bytes data = 4;
  ProofType proof_type = 5;
}

message SetLeafResponse {
  Node node = 1;
  optional Proof proof = 2;
}

message SetNonLeafRequest {
  optional bytes contract_id = 1;
  uint64 index = 2;
  optional bytes hash = 3;
  bytes left_child_hash = 4;
  bytes right_child_hash = 5;
}

message SetNonLeafResponse { Node node = 1; }

message PoseidonHashRequest {
  optional bytes contract_id = 1;
  // Because the original data we want to hash can be any binary data,
  // it may not be a valid input to the poseidon hash function
  // (which takes an array of field elements as input), we may need to
  // pad or modify the original data to hash it. This parameter is the
  // transformed data which can be feeded into poseidon hash function directly.
  // As the way of transforming the of original data is non-standard,
  // the caller MUST pass the transformed data here. It is guarenteed
  // that the hash returned here is stable.
  bytes data = 2;
}

message PoseidonHashResponse { bytes hash = 1; }

service KVPair {
  rpc GetRoot(GetRootRequest) returns (GetRootResponse) {
    option (google.api.http) = {
      get : "/v1/root"
    };
  }
  rpc SetRoot(SetRootRequest) returns (SetRootResponse) {
    option (google.api.http) = {
      post : "/v1/root"
    };
  }

  rpc GetLeaf(GetLeafRequest) returns (GetLeafResponse) {
    option (google.api.http) = {
      get : "/v1/leaves"
    };
  }
  rpc SetLeaf(SetLeafRequest) returns (SetLeafResponse) {
    option (google.api.http) = {
      post : "/v1/leaves"
    };
  }

  rpc GetNonLeaf(GetNonLeafRequest) returns (GetNonLeafResponse) {
    option (google.api.http) = {
      get : "/v1/nonleaves"
    };
  }
  rpc SetNonLeaf(SetNonLeafRequest) returns (SetNonLeafResponse) {
    option (google.api.http) = {
      post : "/v1/nonleaves"
    };
  }
  rpc PoseidonHash(PoseidonHashRequest) returns (PoseidonHashResponse) {
    option (google.api.http) = {
      post : "/v1/poseidon"
    };
  }
}
